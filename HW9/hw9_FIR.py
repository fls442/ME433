import matplotlib.pyplot as plt # for plotting
import numpy as np # for sine function
import csv

def avg(list):
    return sum(list)/len(list)

t = []
v=[]

with open('sigD.csv') as f:
    # open the csv file
    reader = csv.reader(f)
    for row in reader:
        # read the rows 1 one by one
        t.append(float(row[0])) # leftmost column
        v.append(float(row[1])) # second column
        # data2.append(float(row[2])) # third column

dt = t[1]-t[0]
print(str(dt))

##### FFT The Raw Data ########
Fs = 10000                      # sample rate
Ts = 1.0/Fs;                    # sampling interval
ts = np.arange(0,t[-1],Ts)      # time vector
y = v                           # the data to make the fft from
n = len(y)                      # length of the signal
k = np.arange(n)
T = n/Fs
frq = k/T                       # two sides frequency range
frq = frq[range(int(n/2))]      # one side frequency range
Y = np.fft.fft(y)/n             # fft computing and normalization
Y = Y[range(int(n/2))]


##### Filter the Data ########
f = []

h = [
    0.000000000000000000,
    -0.000000733187507994,
    -0.000002514832169553,
    -0.000004663189391103,
    -0.000006411912043391,
    -0.000006894650075208,
    -0.000005128921027786,
    0.000000000000000000,
    0.000009754363726571,
    0.000025557561404639,
    0.000049005219802397,
    0.000081872943140811,
    0.000126119913694109,
    0.000183887634646636,
    0.000257493196406908,
    0.000349416569001100,
    0.000462281565774996,
    0.000598830284134460,
    0.000761891003573286,
    0.000954339705406193,
    0.001179055567694072,
    0.001438870977808257,
    0.001736516788789889,
    0.002074563718984522,
    0.002455360952379098,
    0.002880973134926539,
    0.003353117075610483,
    0.003873099546309844,
    0.004441757628542494,
    0.005059403075507749,
    0.005725772142930002,
    0.006439982291319788,
    0.007200497075605886,
    0.008005100416757878,
    0.008850881296018204,
    0.009734229728566586,
    0.010650844663521859,
    0.011595754225546215,
    0.012563348464977427,
    0.013547424523904094,
    0.014541243860821495,
    0.015537600912594417,
    0.016528902315624129,
    0.017507255564510497,
    0.018464565762032634,
    0.019392638914479399,
    0.020283290056267139,
    0.021128454351758700,
    0.021920299223858908,
    0.022651335501065052,
    0.023314525559019444,
    0.023903386460090124,
    0.024412086164923179,
    0.024835531002085399,
    0.025169442733675097,
    0.025410423743004226,
    0.025556009091159522,
    0.025604704437664948,
    0.025556009091159525,
    0.025410423743004226,
    0.025169442733675097,
    0.024835531002085399,
    0.024412086164923172,
    0.023903386460090128,
    0.023314525559019444,
    0.022651335501065056,
    0.021920299223858911,
    0.021128454351758696,
    0.020283290056267146,
    0.019392638914479399,
    0.018464565762032644,
    0.017507255564510504,
    0.016528902315624129,
    0.015537600912594422,
    0.014541243860821501,
    0.013547424523904100,
    0.012563348464977434,
    0.011595754225546215,
    0.010650844663521864,
    0.009734229728566589,
    0.008850881296018210,
    0.008005100416757878,
    0.007200497075605891,
    0.006439982291319788,
    0.005725772142930000,
    0.005059403075507749,
    0.004441757628542499,
    0.003873099546309850,
    0.003353117075610484,
    0.002880973134926539,
    0.002455360952379100,
    0.002074563718984522,
    0.001736516788789891,
    0.001438870977808259,
    0.001179055567694071,
    0.000954339705406193,
    0.000761891003573287,
    0.000598830284134461,
    0.000462281565774996,
    0.000349416569001100,
    0.000257493196406909,
    0.000183887634646636,
    0.000126119913694109,
    0.000081872943140812,
    0.000049005219802397,
    0.000025557561404639,
    0.000009754363726571,
    0.000000000000000000,
    -0.000005128921027786,
    -0.000006894650075208,
    -0.000006411912043391,
    -0.000004663189391103,
    -0.000002514832169553,
    -0.000000733187507994,
    0.000000000000000000,
]


pts = len(h)
f = [0] * (pts-1)

for ii in range(pts-1, len(v), 1):
    start = ii-pts+1
    vals = v[start:ii+1]
    mult = zip(h, vals)
    avg = sum([a * b for a, b in mult])
    f.append(avg)


##### FFT The Filtered Data ########
Fs = 10000                      # sample rate
Ts = 1.0/Fs;                    # sampling interval
ts = np.arange(0,t[-1],Ts)      # time vector
y = f                           # the data to make the fft from
n = len(y)                      # length of the signal
k = np.arange(n)
T = n/Fs
frq = k/T                       # two sides frequency range
frq = frq[range(int(n/2))]      # one side frequency range
Z = np.fft.fft(y)/n             # fft computing and normalization
Z = Z[range(int(n/2))]



##### Plot All The Data ########
fig, (ax1, ax2) = plt.subplots(2, 1)
ax1.plot(t,v,'b')
ax1.plot(t,f,'r')
ax1.set_xlabel('Time')
ax1.set_ylabel('Amplitude')
ax2.loglog(frq,abs(Y),'b') # plotting the fft
ax2.loglog(frq,abs(Z),'r')
ax2.set_xlabel('Freq (Hz)')
ax2.set_ylabel('|Y(freq)|')
plt.show()